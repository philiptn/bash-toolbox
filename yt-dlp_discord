#!/usr/bin/env bash

max_res="res:480" # 480p max resolution
target_size_mb=7 # 8MB target size, but 1MB headroom
target_audio_bitrate=96 # 128kbps target audio bitrate
audio_only=0
crop=0
verbose="--no-warnings"
ffmpeg_loglevel="-loglevel quiet"

# Thanks to 'Chris Pearson' (Aug 15, 2020) for getopts example
# https://stackoverflow.com/a/40190976

while [ $OPTIND -le "$#" ]
do
    if getopts navc option
    then
        case $option
        in
            n) target_size_mb=38  # 40MB target size, but 2MB headroom
               target_audio_bitrate=256 # 256kbps target audio bitrate
               ;;
            a) audio_only=1
               ;;
	    v) verbose="--verbose"
               ffmpeg_loglevel="-loglevel info"
               ;;
	    c) crop=1
               ;;
        esac
    else
        script_args+=("${!OPTIND}")
        ((OPTIND++))
    fi
done

# Thanks to 'tobek' (Jul 14, 2020) for duration and bitrate calculation examples
# https://unix.stackexchange.com/a/598360

duration=$(yt-dlp --no-warnings --print duration ${script_args[@]})
target_size=$(($target_size_mb * 1000 * 1000 * 8)) # target size in bits
duration_round_up=$((${duration%.*} + 1))

total_bitrate=$(($target_size / $duration_round_up))
audio_bitrate=$(($target_audio_bitrate * 1000))
video_bitrate=$(($total_bitrate - $audio_bitrate))

# If calculated video bitrate is negative, make audio mono
if [[ ! $video_bitrate -gt 0 ]]
then
   postprocessor_args_str="VideoConvertor:-b:v ${video_bitrate} -maxrate:v ${video_bitrate} -bufsize:v $((${target_size} / 20)) -b:a ${audio_bitrate} -ac 1"
fi

postprocessor_args_str="VideoConvertor:-b:v ${video_bitrate} -maxrate:v ${video_bitrate} -bufsize:v $((${target_size} / 20)) -b:a ${audio_bitrate}"
yt_dlp_params="--recode-video mp4 -S ${max_res}"
alt_params="--format bestaudio --extract-audio --audio-format mp3 --audio-quality $(($total_bitrate / 1000))k"

if [ "$audio_only" = "1" ]
then 
   postprocessor_args_str="ffmpeg:"
   yt_dlp_params=$alt_params
fi

# If calculated video bitrate is still negative, set video and audio to absolute lowest values
if [[ ! $video_bitrate -gt 0 ]]
then
   audio_bitrate=$((10 * 1000)) # 10kbps audio bitrate
   video_bitrate=$(($total_bitrate - $audio_bitrate - 5 * 1000)) # 5kbps bitrate overhead
   # Mono audio, 8kHz (phone audio) sample rate and max res of 240p
   postprocessor_args_str="VideoConvertor:-b:v ${video_bitrate} -maxrate:v ${video_bitrate} -bufsize:v $((${target_size} / 20)) -vf scale=-2:240 -b:a ${audio_bitrate} -ar 8000 -ac 1"
fi

# Print debug info if verbose is enabled
if [[ "$verbose" = "--verbose" ]]
then
   echo "Duration (s): $duration_round_up"
   echo "Target size (bits): $target_size"
   echo "Duration round-up (s) $duration_round_up"
   echo "Total bitrate (bits): $total_bitrate"
   echo "Audio bitrate (bits): $audio_bitrate"
   echo "Video bitrate (bits): $video_bitrate"
fi

# If calculated video bitrate is less than 1kbps, throw error
if [[ ! $video_bitrate -gt 1000 ]]
then
   echo "ERROR: Video is too long to be compressed."
   exit 1
fi

yt-dlp ${verbose} ${yt_dlp_params} --postprocessor-args "${postprocessor_args_str}" --output '%(title)s.%(ext)s' ${script_args[@]}

if [ "$crop" = "1" ]
then
   file=$(find . -name "*.mp4" -execdir echo '{}' ';')
   cropvalue=$(ffmpeg -ss 5 -i "$file" -t 1 -vf cropdetect -f null - 2>&1 | awk '/crop/ { print $NF }' | tail -1)
   echo "[FFmpeg] Auto-cropping video..."
   ffmpeg $ffmpeg_loglevel -i "$file" -vf $cropvalue -c:a copy "cropped_$file" && rm "$file" && mv "cropped_$file" "$file"
fi

# If running script under WSL (Windows), automatically open explorer in current directory
if $(uname -a | grep -q 'microsoft')
then
   explorer.exe .
fi

