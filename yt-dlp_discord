#!/usr/bin/env bash

# Text color definitions
BLUE="\e[34m"
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[1;33m"
ENDCOL="\e[0m"

max_res="res:480" # 480p max resolution
target_size_mb=7 # 8MB target size, but 1MB headroom
target_audio_bitrate=96 # 128kbps target audio bitrate
audio_only=0
crop=0
cropvalue="crop=iw:ih:(in_w-out_w)/2:(in_h-out_h)/2"
cropdetect_params_bb="20:2:0"
cropdetect_params_wb="3:2:0"
height_buffer=22 # Height buffer after cropping (pixels)
width_buffer=28 # Width buffer after cropping (pixels)

verbose="--no-warnings"
ffmpeg_enable=1
ffmpeg_loglevel="-loglevel quiet"
cursor="spinner"

# Thanks to 'Jonas Eberle' (Feb 3, 2020) for spinning cursor example
# https://unix.stackexchange.com/a/565551

function shutdown() {
  tput cnorm # reset cursor
}
trap shutdown EXIT

function cursorBack() {
  echo -en "\033[$1D"
}

function spinner() {
  # make sure we use non-unicode character type locale
  # (that way it works for any locale as long as the font supports the characters)
  local LC_CTYPE=C

  local pid=$1 # Process Id of the previous running command

  case 1 in
  1)
    local spin='-\|/'
    local charwidth=1
    ;;
  2)
    local spin='․‥…‥․'
    local charwidth=3
    ;;
  3)
    local spin='⣷⣯⣟⡿⢿⣻⣽⣾'
    local charwidth=3
    ;;
  esac

  local i=0
  tput civis # cursor invisible
  while kill -0 $pid 2>/dev/null; do
    local i=$(((i + $charwidth) % ${#spin}))
    printf "%s" "${spin:$i:$charwidth}"

    cursorBack 1
    sleep .1
  done
  printf "Done.\n"
  tput cnorm
  wait $pid # capture exit code
  return $?
}

function nothing() {
  local pid=$1
  wait $pid
  return $?
}

# Delete .tmp folder in case any previous downloads failed
rm -rf .tmp

# Thanks to 'Chris Pearson' (Aug 15, 2020) for getopts example
# https://stackoverflow.com/a/40190976

while [ $OPTIND -le "$#" ]
do
    if getopts navc option
    then
        case $option
        in
            n) target_size_mb=45  # 50MB target size, but 3MB headroom
               target_audio_bitrate=256 # 256kbps target audio bitrate
               ;;
            a) audio_only=1
               ;;
            v) verbose="--verbose"
               ffmpeg_loglevel="-loglevel info"
	       cursor="nothing"
               ;;
            c) crop=1
               ;;
        esac
    else
        script_args+=("${!OPTIND}")
        ((OPTIND++))
    fi
done

# Thanks to 'tobek' (Jul 14, 2020) for duration and bitrate calculation examples
# https://unix.stackexchange.com/a/598360

target_size=$(($target_size_mb * 1000 * 1000 * 8)) # target size in bits
duration=$(yt-dlp --no-warnings --print duration ${script_args[@]})
duration_round_up=$((${duration%.*} + 1))

total_bitrate=$(($target_size / $duration_round_up))
audio_bitrate=$(($target_audio_bitrate * 1000))
video_bitrate=$(($total_bitrate - $audio_bitrate))

# If calculated video bitrate is less than 1kbps, throw error
if [[ ! $video_bitrate -gt 1000 ]]
then
   echo -e "${RED}ERROR:${ENDCOL} Video is too long to be compressed."
   exit 1
fi

yt_dlp_params="-S ${max_res}"
alt_params="--format bestaudio --extract-audio --audio-format mp3 --audio-quality $(($total_bitrate / 1000))k"

if [ "$audio_only" = "1" ]
then 
   ffmpeg_enable=0
   yt_dlp_params=$alt_params
fi

################
### DOWNLOAD ###
################

mkdir .tmp
yt-dlp ${verbose} ${yt_dlp_params} --output '.tmp/%(id)s.%(ext)s' ${script_args[@]}

####################
### CALCULATIONS ###
####################

file=$(find .tmp -type f | cut -d "/" -f 2)
file_no_ext=$(find .tmp -type f | cut -d "/" -f 2 | cut -d "." -f 1)

if [[ "$crop" = "1" ]]
then
   echo "[FFmpeg] Auto-cropping enabled."
   
   # Temporarly change IFS (Internal Field Separator) to ":" instead of " ".
   old_IFS="$IFS"
   IFS=":"
   
   baseres=$(ffmpeg -i ".tmp/$file" -t 1 -vf "cropdetect=0:0:0" -f null - 2>&1 | awk '/crop/ { print $NF }' | tail -1)
   
   # Detect black bars
   cropvalue_bb_initial=$(ffmpeg -ss 1 -i ".tmp/$file" -t 1 -vf "cropdetect=${cropdetect_params_bb}" -f null - 2>&1 | awk '/crop/ { print $NF }' | tail -1)
   cropvalue_bb_seek=$(ffmpeg -ss 2 -i ".tmp/$file" -t 1 -vf "cropdetect=${cropdetect_params_bb}" -f null - 2>&1 | awk '/crop/ { print $NF }' | tail -1)
   
   width_bb_init=$(echo $cropvalue_bb_initial | cut -d "=" -f 2 | awk '{print $1}')
   height_bb_init=$(echo $cropvalue_bb_initial | cut -d ":" -f 1 | awk '{print $2}')
   x_bb_init=$(echo $cropvalue_bb_initial | cut -d ":" -f 1 | awk '{print $3}')
   y_bb_init=$(echo $cropvalue_bb_initial | cut -d ":" -f 1 | awk '{print $4}')
   
   width_bb=$(($width_bb_init + $width_buffer * 2))
   height_bb=$(($height_bb_init + $height_buffer * 2))
   x_bb=$((x_bb_init - $width_buffer))
   y_bb=$((y_bb_init - $height_buffer))

   # Detect white bars
   cropvalue_wb_initial=$(ffmpeg -ss 1 -i ".tmp/$file" -t 1 -vf "lutrgb=r=negval:g=negval:b=negval, cropdetect=${cropdetect_params_wb}" -f null - 2>&1 | awk '/crop/ { print $NF }' | tail -1)
   cropvalue_wb_seek=$(ffmpeg -ss 2 -i ".tmp/$file" -t 1 -vf "lutrgb=r=negval:g=negval:b=negval, cropdetect=${cropdetect_params_wb}" -f null - 2>&1 | awk '/crop/ { print $NF }' | tail -1)
   
   width_wb_init=$(echo $cropvalue_wb_initial | cut -d "=" -f 2 | awk '{print $1}')
   height_wb_init=$(echo $cropvalue_wb_initial | cut -d ":" -f 1 | awk '{print $2}')
   x_wb_init=$(echo $cropvalue_wb_initial | cut -d ":" -f 1 | awk '{print $3}')
   y_wb_init=$(echo $cropvalue_wb_initial | cut -d ":" -f 1 | awk '{print $4}')
   
   width_wb=$(($width_wb_init + $width_buffer * 2))
   height_wb=$(($height_wb_init + $height_buffer * 2))
   x_wb=$((x_wb_init - $width_buffer))
   y_wb=$((y_wb_init - $height_buffer))

   # If calculated crop-value is identical value both from the start and a few seconds in, and the values are different from base resolution
   if [[ "$cropvalue_bb_initial" = "$cropvalue_bb_seek" ]]
   then
      if [[ "$cropvalue_bb_initial" != "$baseres" ]]
      then
         if [[ ! $x_bb -gt 0 ]]; then width_buffer=0; width_bb=$width_bb_init; x_bb=$x_bb_init; fi
         if [[ ! $y_bb -gt 0 ]]; then height_buffer=0; height_bb=$height_bb_init; y_bb=$y_bb_init; fi
	 cropvalue="crop=$width_bb:$height_bb:$x_bb:$y_bb"
      fi

      if [[ "$cropvalue_wb_initial" = "$cropvalue_wb_seek" ]]
      then
         # If the inverted crop-value detection is not base resolution, apply crop based on white borders instead.
         if [[ "$cropvalue_wb_initial" !=  "$baseres" ]]
         then
            if [[ ! $x_wb -gt 0 ]]; then width_buffer=0; width_wb=$(($width_wb_init)); x_wb=$x_wb_init; fi
            if [[ ! $y_wb -gt 0 ]]; then height_buffer=0; height_wb=$(($height_wb_init)); y_wb=$y_wb_init; fi
	   
	    if [[ ! $height_bb_init < $height_wb_init ]]
            then
	       cropvalue="crop=$width_wb:$height_wb:$x_wb:$y_wb"
	    fi

	    if [[ "$cropvalue_bb_initial" = "$baseres" ]]
            then
	       cropvalue="crop=$width_wb:$height_wb:$x_wb:$y_wb"
	    fi
	 fi
      fi
   fi
   # Revert IFS to standard
   IFS="$old_IFS"
fi

if [[ "$audio_only" = "1" ]]
then
   mv ".tmp/$file" "./$file"
   rm -rf .tmp
fi

# If video duration is not available (Instagram Reels), get video length from ffmpeg instead
if [[ "$duration" = "NA" ]]
then
   duration=$(ffmpeg -i ".tmp/$file" 2>&1 | grep Duration | awk '{print $2}' | tr -d , | awk -F: '{ print ($1 * 3600) + ($2 * 60) + ($3)}')
   duration_round_up=$((${duration%.*} + 1))
fi

total_bitrate=$(($target_size / $duration_round_up))
audio_bitrate=$(($target_audio_bitrate * 1000))
video_bitrate=$(($total_bitrate - $audio_bitrate))

postprocessor_args_str="-b:v ${video_bitrate} -maxrate:v ${video_bitrate} -bufsize:v $((${target_size} / 20)) -vf "$cropvalue" -b:a ${audio_bitrate}"

# If calculated video bitrate is negative, make audio mono
if [[ ! $video_bitrate -gt 0 ]]
then
   postprocessor_args_str="-b:v ${video_bitrate} -maxrate:v ${video_bitrate} -bufsize:v $((${target_size} / 20)) -vf "$cropvalue" -b:a ${audio_bitrate} -ac 1"
fi

# If calculated video bitrate is still negative, set video and audio to absolute lowest values
if [[ ! $video_bitrate -gt 0 ]]
then
   audio_bitrate=$((10 * 1000)) # 10kbps audio bitrate
   video_bitrate=$(($total_bitrate - $audio_bitrate - 5 * 1000)) # 5kbps bitrate overhead
   # Mono audio, 8kHz (phone audio) sample rate and max res of 240p
   postprocessor_args_str="-b:v ${video_bitrate} -maxrate:v ${video_bitrate} -bufsize:v $((${target_size} / 20)) -vf "scale=-2:240, $cropvalue" -b:a ${audio_bitrate} -ar 8000 -ac 1"
fi

# If calculated video bitrate is less than 1kbps, throw error
if [[ ! $video_bitrate -gt 1000 ]]
then
   echo -e "${RED}ERROR:${ENDCOL} Video is too long to be compressed." 
   exit 1
fi

##############
### FFMPEG ###
##############

if [[ "$ffmpeg_enable" = "1" ]]
then
   printf "[FFmpeg] Converting video... "
   ffmpeg $ffmpeg_loglevel -i ".tmp/$file" $postprocessor_args_str "$file_no_ext.mp4" -y & $cursor $!
   rm ".tmp/$file" && rm -rf .tmp
   printf "[FFmpeg] File saved as: '${YELLOW}$file_no_ext.mp4${ENDCOL}'\n"
fi

# Print debug info if verbose is enabled
if [[ "$verbose" = "--verbose" ]]
then
   echo "+------------+"
   echo -e "| ${YELLOW}DEBUG INFO${ENDCOL} |"
   echo "+------------+"
   echo -e "${YELLOW}Duration (s):${ENDCOL} $duration"
   echo -e "${YELLOW}Duration round-up (s):${ENDCOL} $duration_round_up"
   echo -e "${YELLOW}Target size (bits):${ENDCOL} $target_size"
   echo -e "${YELLOW}Total bitrate (bits):${ENDCOL} $total_bitrate"
   echo -e "${YELLOW}Video bitrate (bits):${ENDCOL} $video_bitrate"
   echo -e "${YELLOW}Audio bitrate (bits):${ENDCOL} $audio_bitrate"
   echo -e "${YELLOW}Base resolution:${ENDCOL} $baseres"
   echo -e "${YELLOW}Cropvalue black bars initial:${ENDCOL} $cropvalue_bb_initial"
   echo -e "${YELLOW}Cropvalue black bars seek:${ENDCOL} $cropvalue_bb_seek"
   echo -e "${YELLOW}Cropvalue white bars initial:${ENDCOL} $cropvalue_wb_initial"
   echo -e "${YELLOW}Cropvalue white bars seek:${ENDCOL} $cropvalue_wb_seek"
   echo -e "${YELLOW}Cropvalue (FINAL):${ENDCOL} $cropvalue"
   echo -e "${YELLOW}yt-dlp parameters (audio only):${ENDCOL} $alt_params"
   echo -e "${YELLOW}yt-dlp parameters (FINAL):${ENDCOL} $yt_dlp_params"
   echo -e "${YELLOW}FFmpeg arguments:${ENDCOL} $postprocessor_args_str"
fi

# If running script under WSL (Windows), automatically open explorer in current directory
if $(uname -a | grep -q 'microsoft')
then
   explorer.exe .
fi

